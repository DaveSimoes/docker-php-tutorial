stages:
  - build_test

QA and Tests:
  stage: build_test
  # see https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker
  image: docker:20.10.12
  # see https://forum.gitlab.com/t/docker-dind-stops-working-after-12-1-0-update/28664/4
  services:
    - name: docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # see https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    # see https://testdriven.io/blog/faster-ci-builds-with-docker-cache/
    DOCKER_BUILDKIT: 1
    COMPOSE_DOCKER_CLI_BUILD: 1
  before_script:
    # "curl" is required to download docker compose
    - start_install_tools=$(date +%s)
    - apk add --no-cache make bash curl
    # install docker compose
    # @see https://docs.docker.com/compose/cli-command/#install-on-linux
    - mkdir -p ~/.docker/cli-plugins/
    - curl -sSL https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
    - chmod +x ~/.docker/cli-plugins/docker-compose
    # install docker-compose-wait to wait for the mysql container to become available
    # @see https://github.com/ufoscout/docker-compose-wait
    - curl -sSL https://github.com/ufoscout/docker-compose-wait/releases/download/2.9.0/wait -o ./wait
    - chmod +x ./wait
    - end_install_tools=$(date +%s)
    # DEBUG
    - docker version
    - docker compose version
    # show linux distro info
    - cat /etc/*-release
    #ENDDEBUG
    # Pass default values to the make-init command - otherwise we would have to pass those as arguments to every make call
    - make make-init ENVS="ENV=ci TAG=latest EXECUTE_IN_CONTAINER=true"
    - start_docker_build=$(date +%s)
    - make docker-build
    - end_docker_build=$(date +%s)
    - cp $GPG_KEY_FILE ./secret.gpg
  script:
    - mkdir .build && chmod 777 .build
    - make docker-up
    - make gpg-init
    - make secret-decrypt
    # Run the tests and qa tools but only store the error instead of failing immediately
    # @see https://stackoverflow.com/a/59200738/413531
    - start_qa=$(date +%s)
    - make qa ENV=ci || FAILED=true
    - end_qa=$(date +%s)
    # We need to wait until mysql and redis are available.
    # Both containers forward their default ports to the host system, so that we can check "localhost".
    # Since we use a DinD setup, we must use "docker" as a hostname, 
    # @see https://stackoverflow.com/a/45374777/413531 and https://stackoverflow.com/a/45416767/413531
    - start_wait_for_containers=$(date +%s)
    - WAIT_TIMEOUT=30 WAIT_HOSTS=docker:6379,docker:3306 ./wait 
    - end_wait_for_containers=$(date +%s)
    - start_test=$(date +%s)
    - make test ENV=ci || FAILED=true
    - end_test=$(date +%s)
    - make docker-down ENV=ci || true
    # RUNTIMES
    - echo `expr $end_install_tools - $start_install_tools`
    - echo `expr $end_docker_build - $start_docker_build`
    - echo `expr $end_qa - $start_qa`
    - echo `expr $end_wait_for_containers - $start_wait_for_containers`
    - echo `expr $end_test - $start_test`
    # END RUNTIMES
    # Use if-else constructs in Gitlab pipelines
    # @see https://stackoverflow.com/a/55464100/413531
    - if [ "$FAILED" == "true" ]; then exit 1; fi
  # Save the JUNIT report.xml file as artifact, so we can download it later
  # @see https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html
  artifacts:
    when: always
    paths:
      # the quotes are required
      # @see https://stackoverflow.com/questions/38009869/how-to-specify-wildcard-artifacts-subdirectories-in-gitlab-ci-yml#comment101411265_38055730
      - ".build/*"
    expire_in: 1 week
  rules:
    - if: '($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "part-7-ci-pipeline-docker-php-gitlab-github")'
    - if: '$CI_COMMIT_BRANCH'
      when: manual
